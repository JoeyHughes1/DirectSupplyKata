Looking at the API, I'm thinking the way it will work is you can request a random quiz on a given topic (one of the ones that Open Trivia DB offers), or you can take a custom quiz on a certain category. I'm thinking you open the program, and you can either choose a category to take a quiz, or you can make a quiz yourself.

If you choose to make a quiz yourself, then you can enter a category, then loop entering questions and answers, choosing one to be the correct answer. I think I will keep to just supporting questions with one correct answer and at least one incorrect answer. At least one so that we can do 4 answers or something like True/False. That seems to be similar to how the Open Trivia DB json looks, so if I can support that then I can support this.
So you enter a category, then enter questions and answers. I think you should probably also be able to give it a name. So a quiz will consist of a name, a category, and a list of questions. Each questions is a question prompt, a correct answer, then a variable-size list of incorrect answers.

If you choose to take a quiz, then you first choose a category. In a category, there will be a list of quizzes you can take. If the category is one that Open Trivia DB supports, then there will be a quiz titled "Random Quiz" that serves up 10 or so questions taken from the API. If there is a custom quiz in the category, then the title of the custom quiz will show up. If it is a category that Open Trivia DB does not have, then that will be the only quiz there. So, the categories all will either be one that Open Trivia DB supports or one that has a custom quiz.
I think each custom quiz should be its own separate file. I guess there has to be a file that has to keep up with what all of the categories are, since we don't want to have to go through and find all the categories. OR alternatively, we store the JSON files in folders that are the categories. Then when displaying the categories we just need to add all the categories that Open Trivia DB offers, then look through all the folders. If one matches a category from Open Trivia DB, then we add all the quizzes there into that category. If it doesn't, then we add a new category and put the quizzes in there.

--
I think I will keep that as the scope. I think allowing editing and deleting of the quizzes could be good to do and not too too hard if I have the time to add that. Other than that, I will just have it be creating and taking random quizzes.

--
I think I will try and use JS to do this. Or maybe I should try learning C# real quick, since that is what Direct Supply uses.
I think I'm going to try learning C#. At Amadeo's they said it should be a quick learn from Java, and looking at it it seems pretty similar. Plus, it's what they are going to be using anyway. I was going to have to relearn JS anyway, but this will probably be a better thing to learn for right now.

My big question is displaying. I'm usually best with just pure code and am not the best at designing pages and making them look pretty. I could just do this in command line, but that seems lame. I have some basic experience with HTML/CSS, but that seems like it would be a time sink. I don't think I'll be able to learn how to make a desktop app with C# very fast.
I could maybe try just doing command line first, then, once I'm more familiar with C# after working with it for a bit, I could try learning how to interface with HTML/CSS. I have some past HTML/CSS projects I could look at to try and make a quick interface. Then, if I feel like it, I could try seeing what the deal is with React. They also mentioned using that. I've used React Native for an app before, so maybe it wouldn't be too hard to pick up. But that would probably be a lot to do.
If I make the code nice and modular, then I could start in the command line and have the command line really just be for sending events to the code. Then, transferring to HTML or React would just be making an interface to call those same functions. With some extra functionality, too. I think I will try that. Start with the command line, then work up to a web interface. I hope it's not too hard to interface React with something like C#.
So, C#, command line, then work to HTML or React.
I just had a conversation with ChatGPT about how this all works. I've done a lot of coding, but working with web stuff is something I haven't really done, especially with frontend and backend and stuff. I talked about what .NET is, how web interfaces work, what I should install in Visual Studio (since I'm installing that for the first time), etc. I'm going to start with just command line with .NET desktop development, get the functionality all working with basic command line functionality, then if I have time go to trying to make a basic web interface, maybe with React.


--
I have just done a LOT of reading on C# references and documentation and all the features it has and asked ChatGPT a lot of clarifying questions, and I think I have a decent grasp on things. I will have to look back a lot since I don't have it all memorized probably, but I can at least recognize it now. I think now I can start deciding on a structure for the program.
There will be one class with the main method that accesses the kind of interface (not a literal interface) to interact with the quizzes. I will need: 
A Question class with a prompt, a correct answer, and a list of incorrect answers.
A Quiz class with a list of Questions, a category, and a title.
A RandomQuiz class that extends Quiz, with a method to refresh its questions.
A kind of manager class that can retrieve a certain quiz (randomizing if its a random quiz), create a new quiz, and generate one of the random quizzes. 

I think the manager will also need a startup method to create the file structure and populate it with category folders and random quiz files. I will have random quizzes be their own file, I think. That way, we can just take all the files in a category folder to get all the quizzes with that category, instead of having to worry about if its one of the categories that needs to have a random quiz option. Then, when loading the quiz, we can just detect if it is one of the random quizzes and, if it is, then before passing it out of the function we call the refresh function to get new random questions. That will be where the API call to the Open Trivia DB will go, in that refresh function. I can use the example here (https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/overview) to guide that implementation. I will need to experiment more to see exactly how I will be able to handle that JSON file, since it won't be exactly one of my classes. There's got to be a way to just use it as a normal JSON, since I will know beforehand the structure of it. I wonder if I can define a struct definition that can hold the information straight from the JSON. Hm. 
I wonder how to pass in a new Quiz as well. It feels weird to just have the client code (the command line code in main) make a Quiz object, then just pass it straight in to a function in the manager that just adds it to the list, but that does make the most sense. Otherwise, it'd basically be just making a struct with all the same information as a Quiz, then the function in the manager just creates a quiz with all that information. But maybe that's how itd have to work with a web interface. It feels weird to ask the web client to make a Quiz object, then pass it to me. I guess I could also have it ask the manager to create a new quiz object with a certain title, then have a method to add a question to a quiz, and that's less weird to pass in just all the arguments for. I could use the "params" keyword for that if I wanted to as well, that was a cool feature. So that way the client would ask to make a new quiz, then one by one ask to add new questions to that same quiz. I guess I won't know the best way to do that until I understand better how requests to APIs go with a web interface. I could just make a way that works and cross that bridge when I get there later.
I'm also thinking it'd be weird to have the add question identify the quiz by having a parameter to pass in the title of the quiz. That would require unique titles for every quiz, and we would have to search through all the quizzes to find the one with a matching title.
Maybe on startup, the manager can read all the quizzes from all the categories and add them to a list in memory, then we could identify each quiz by its index in that list instead of the title. Than we could just update the file whenever a quiz is changed, which is overall not often. That would require a lot of memory to just have all those quizzes in RAM when they're also already in the file system. But it saves a lot of time searching through the file system to find quizzes. Maybe a good compromise would be going through at startup and making a list, but not of quizzes, we have each index be the filepath of the quiz. So, we would only need to bring a quiz into memory when we are editing or reading it. Although, that kind of sucks if we have to do I/O every time we want to read info from a quiz. And I shouldn't be too worried about efficiency for this anyway, there's always time afterwards to improve it if that's what I want. I could just stick to making the list of all the Quizzes in the manager, and identifying them by index. If I don't have deleting quizzes as a feature, then that works, but if I were to remove a quiz, then the indices for a lot of the quizzes would change, which isn't good. Maybe, the best choice is actually to just have them all in a list in the manager, and just search through when we need to edit a quiz. That's fine, there's probably a better way, but that works and won't have issues with deleting a quiz or anything. I could think about having the quizzes in a hash table with the hash being based off the title too, and maybe I'll do that, but that seems like overengineering for this Kata. OK, I think it'd be best to just start programming next, I have a design down, pretty much, I can worry about the details of the implementation as I'm doing it. I will go to bed and start the implementation tomorrow.

--
First I think I'll make the Question Class. I think I'll have all the fields as properties with just getters and setters. Maybe I'll have a method to get a list of all the answers, with no marking as which is the correct one. Then, I could have a method to check if a certain answer choice is the correct one.
I'm having some trouble deciding what I want to be able to be edited directly. What functions do I want to be able to be done on a quiz? Well, I want it to be able to be made with a constructor that gives the prompt, correct answer, and the incorrect answers. You should be able to get the prompt, get the answer choices (all of them), and check if a certain answer choice is correct, at least. I guess that's really it. I could keep it a constant object like that where you can't change anything after it's made. That kind of makes sense, cause how often are you changing just a question's prompt or one of the answer choices. I'll do it like that. So only a getter on the prompt, the correct and list of incorrect answers are private. No setters. Plus, two methods to get all the answers (in a shuffled order) and a method to check an answer choice.

I'm writing the Question code and making a quick interface to test it on the command line, and I just realized I probably don't need to have the restriction that the question has at least one incorrect answer. Because, if I am already providing an interface to check a string against the correct answer, then it would be easy to make a open-ended short answer question where the user has to type in the answer. In that case, we would have a correct answer and no incorrect answers, and just check what the user entered against the correct answer string (case-insensitive).