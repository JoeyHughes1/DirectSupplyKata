Looking at the API, I'm thinking the way it will work is you can request a random quiz on a given topic (one of the ones that Open Trivia DB offers), or you can take a custom quiz on a certain category. I'm thinking you open the program, and you can either choose a category to take a quiz, or you can make a quiz yourself.

If you choose to make a quiz yourself, then you can enter a category, then loop entering questions and answers, choosing one to be the correct answer. I think I will keep to just supporting questions with one correct answer and at least one incorrect answer. At least one so that we can do 4 answers or something like True/False. That seems to be similar to how the Open Trivia DB json looks, so if I can support that then I can support this.
So you enter a category, then enter questions and answers. I think you should probably also be able to give it a name. So a quiz will consist of a name, a category, and a list of questions. Each questions is a question prompt, a correct answer, then a variable-size list of incorrect answers.

If you choose to take a quiz, then you first choose a category. In a category, there will be a list of quizzes you can take. If the category is one that Open Trivia DB supports, then there will be a quiz titled "Random Quiz" that serves up 10 or so questions taken from the API. If there is a custom quiz in the category, then the title of the custom quiz will show up. If it is a category that Open Trivia DB does not have, then that will be the only quiz there. So, the categories all will either be one that Open Trivia DB supports or one that has a custom quiz.
I think each custom quiz should be its own separate file. I guess there has to be a file that has to keep up with what all of the categories are, since we don't want to have to go through and find all the categories. OR alternatively, we store the JSON files in folders that are the categories. Then when displaying the categories we just need to add all the categories that Open Trivia DB offers, then look through all the folders. If one matches a category from Open Trivia DB, then we add all the quizzes there into that category. If it doesn't, then we add a new category and put the quizzes in there.

--
I think I will keep that as the scope. I think allowing editing and deleting of the quizzes could be good to do and not too too hard if I have the time to add that. Other than that, I will just have it be creating and taking random quizzes.

--
I think I will try and use JS to do this. Or maybe I should try learning C# real quick, since that is what Direct Supply uses.
I think I'm going to try learning C#. At Amadeo's they said it should be a quick learn from Java, and looking at it it seems pretty similar. Plus, it's what they are going to be using anyway. I was going to have to relearn JS anyway, but this will probably be a better thing to learn for right now.

My big question is displaying. I'm usually best with just pure code and am not the best at designing pages and making them look pretty. I could just do this in command line, but that seems lame. I have some basic experience with HTML/CSS, but that seems like it would be a time sink. I don't think I'll be able to learn how to make a desktop app with C# very fast.
I could maybe try just doing command line first, then, once I'm more familiar with C# after working with it for a bit, I could try learning how to interface with HTML/CSS. I have some past HTML/CSS projects I could look at to try and make a quick interface. Then, if I feel like it, I could try seeing what the deal is with React. They also mentioned using that. I've used React Native for an app before, so maybe it wouldn't be too hard to pick up. But that would probably be a lot to do.
If I make the code nice and modular, then I could start in the command line and have the command line really just be for sending events to the code. Then, transferring to HTML or React would just be making an interface to call those same functions. With some extra functionality, too. I think I will try that. Start with the command line, then work up to a web interface. I hope it's not too hard to interface React with something like C#.
So, C#, command line, then work to HTML or React.
I just had a conversation with ChatGPT about how this all works. I've done a lot of coding, but working with web stuff is something I haven't really done, especially with frontend and backend and stuff. I talked about what .NET is, how web interfaces work, what I should install in Visual Studio (since I'm installing that for the first time), etc. I'm going to start with just command line with .NET desktop development, get the functionality all working with basic command line functionality, then if I have time go to trying to make a basic web interface, maybe with React.


--
I have just done a LOT of reading on C# references and documentation and all the features it has and asked ChatGPT a lot of clarifying questions, and I think I have a decent grasp on things. I will have to look back a lot since I don't have it all memorized probably, but I can at least recognize it now. I think now I can start deciding on a structure for the program.
There will be one class with the main method that accesses the kind of interface (not a literal interface) to interact with the quizzes. I will need: 
A Question class with a prompt, a correct answer, and a list of incorrect answers.
A Quiz class with a list of Questions, a category, and a title.
A RandomQuiz class that extends Quiz, with a method to refresh its questions.
A kind of manager class that can retrieve a certain quiz (randomizing if its a random quiz), create a new quiz, and generate one of the random quizzes. 

I think the manager will also need a startup method to create the file structure and populate it with category folders and random quiz files. I will have random quizzes be their own file, I think. That way, we can just take all the files in a category folder to get all the quizzes with that category, instead of having to worry about if its one of the categories that needs to have a random quiz option. Then, when loading the quiz, we can just detect if it is one of the random quizzes and, if it is, then before passing it out of the function we call the refresh function to get new random questions. That will be where the API call to the Open Trivia DB will go, in that refresh function. I can use the example here (https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/overview) to guide that implementation. I will need to experiment more to see exactly how I will be able to handle that JSON file, since it won't be exactly one of my classes. There's got to be a way to just use it as a normal JSON, since I will know beforehand the structure of it. I wonder if I can define a struct definition that can hold the information straight from the JSON. Hm. 
I wonder how to pass in a new Quiz as well. It feels weird to just have the client code (the command line code in main) make a Quiz object, then just pass it straight in to a function in the manager that just adds it to the list, but that does make the most sense. Otherwise, it'd basically be just making a struct with all the same information as a Quiz, then the function in the manager just creates a quiz with all that information. But maybe that's how itd have to work with a web interface. It feels weird to ask the web client to make a Quiz object, then pass it to me. I guess I could also have it ask the manager to create a new quiz object with a certain title, then have a method to add a question to a quiz, and that's less weird to pass in just all the arguments for. I could use the "params" keyword for that if I wanted to as well, that was a cool feature. So that way the client would ask to make a new quiz, then one by one ask to add new questions to that same quiz. I guess I won't know the best way to do that until I understand better how requests to APIs go with a web interface. I could just make a way that works and cross that bridge when I get there later.
I'm also thinking it'd be weird to have the add question identify the quiz by having a parameter to pass in the title of the quiz. That would require unique titles for every quiz, and we would have to search through all the quizzes to find the one with a matching title.
Maybe on startup, the manager can read all the quizzes from all the categories and add them to a list in memory, then we could identify each quiz by its index in that list instead of the title. Than we could just update the file whenever a quiz is changed, which is overall not often. That would require a lot of memory to just have all those quizzes in RAM when they're also already in the file system. But it saves a lot of time searching through the file system to find quizzes. Maybe a good compromise would be going through at startup and making a list, but not of quizzes, we have each index be the filepath of the quiz. So, we would only need to bring a quiz into memory when we are editing or reading it. Although, that kind of sucks if we have to do I/O every time we want to read info from a quiz. And I shouldn't be too worried about efficiency for this anyway, there's always time afterwards to improve it if that's what I want. I could just stick to making the list of all the Quizzes in the manager, and identifying them by index. If I don't have deleting quizzes as a feature, then that works, but if I were to remove a quiz, then the indices for a lot of the quizzes would change, which isn't good. Maybe, the best choice is actually to just have them all in a list in the manager, and just search through when we need to edit a quiz. That's fine, there's probably a better way, but that works and won't have issues with deleting a quiz or anything. I could think about having the quizzes in a hash table with the hash being based off the title too, and maybe I'll do that, but that seems like overengineering for this Kata. OK, I think it'd be best to just start programming next, I have a design down, pretty much, I can worry about the details of the implementation as I'm doing it. I will go to bed and start the implementation tomorrow.

--
First I think I'll make the Question Class. I think I'll have all the fields as properties with just getters and setters. Maybe I'll have a method to get a list of all the answers, with no marking as which is the correct one. Then, I could have a method to check if a certain answer choice is the correct one.
I'm having some trouble deciding what I want to be able to be edited directly. What functions do I want to be able to be done on a quiz? Well, I want it to be able to be made with a constructor that gives the prompt, correct answer, and the incorrect answers. You should be able to get the prompt, get the answer choices (all of them), and check if a certain answer choice is correct, at least. I guess that's really it. I could keep it a constant object like that where you can't change anything after it's made. That kind of makes sense, cause how often are you changing just a question's prompt or one of the answer choices. I'll do it like that. So only a getter on the prompt, the correct and list of incorrect answers are private. No setters. Plus, two methods to get all the answers (in a shuffled order) and a method to check an answer choice.

I'm writing the Question code and making a quick interface to test it on the command line, and I just realized I probably don't need to have the restriction that the question has at least one incorrect answer. Because, if I am already providing an interface to check a string against the correct answer, then it would be easy to make a open-ended short answer question where the user has to type in the answer. In that case, we would have a correct answer and no incorrect answers, and just check what the user entered against the correct answer string (case-insensitive).

I think I will have Quizzes have their categories and titles as normal, but they are set to internal so that QuizManager is the only one really editing their values. I think QuizManager will have a private class of CategoryList, which represents a category and has all the quizzes for that category in there. So, when requesting a quiz the code will have to provide both a category and a title, so the quiz manager knows which list to look for the quiz in.

Next up is the Random Quiz. That will let me test more thoroughly since I won't have to make a bunch of quizzes myself. This will be fun. I think it's just a class that extends a quiz and has a method to randomize its list of Questions using the Open Trivia DB API.

Maybe I should move the shuffling of the answer choices of the Quiz to a static method or something. Now that I'm thinking about it, maybe it should be the client's responsibility to take the correct and incorrect choices and shuffle them up. That's kind of what the trivia db does already. So maybe the command line interface would just request from the QuizManager a Quiz, and it would get a JSON much like the one that the trivia db gives, and it would be the client's responsibility to shuffle the answers and know which one is right and calculate their score and all that. The Quiz Manager would just be for distributing the information about the Quizzes.
This makes more sense, that feels more like an API that could work with a frontend.
So the things that the client would need was a list of all the categories and all the quizzes in each category. Then, using the category and quiz name, it would request a quiz, and then the manager would give them a json esque struct or record, and it's the client's responsiblity to give the quiz and all that.
So that's two or three functions of the Quiz Manager. It gets more complicated with changing the Quizzes. Adding a whole new quiz wouldn't be bad, you just pass into the manager a json-esque object with all the details about the quiz and a list with details about each question.
Editing an existing quiz would be more complicated. Maybe it would be best to just have the manager give out the information like it does before, then the client can edit the information it wants to edit, then tell the quiz manager hey, here's this quiz, I want you to delete this other quiz and add this one in. That would essentially be editing the Quiz. Maybe not the most efficient, that's a lot of data passing around, but it would work. I could see the manager implementation of that literally being find this quiz, delete it, now add a new quiz with this information. That would make it easy to change categories or titles or anything. Also, that essentially is just saying that Quizzes are immutable, and editing involves deleting the old one and making a whole new one. Hm. That works, though.
Another option would be having an option you give to the manager like "I want to change the (0:title, 1:category, 2:a question, etc.)", and then the manager will do the change and be like cool, done now. That would be less data passing around, but I feel like that'd be more complicated. I think I'll try the immutable Quizzes first.
They aren't strictly immutable, since the Random Quizzes are actually just changing the questions that it has, but in terms of interacting with the client, from their perspective they would be immutable and they are just deleting the old and replacing with the new.

So what are all the functions then?:
- (private) Given a category name and a quiz title, find a Quiz object.
    -Turns out, by setting it up with dictionaries, this became one line: 
        - MapCategoryLists[category].Quizzes[title]
- Return a list of categories, maybe how many quizzes are in each one
- Return a list of the quizzes in a certain category
- Return all the information about a Quiz.
- Create a Quiz given a record of information about it.
    - but no duplicate quizzes, if there already is one with the same category and title then bad
- Delete a Quiz given the category and title
- "Edit" a Quiz given a record of information about it.
    - This would just be finding the old Quiz, deleting it, then creating a new quiz with the info


I have finished the QuizManager implementation and, apart from saving to files, it is fully functional. As far as I have tested, the adding, removing, and editing work as they should.

My CLI is good enough to support taking random quizzes from any of the categories, and taking quizzes from any quizzes that already exist, but it does not have an implementaiton for making or removing or editing quizzes. I could implement that, but I'm running out of time, and am really curious about making some kind of Web API, so I am going to try to make a very basic React API if I have the time to. This may be wishful thinking, but I hope to get a demo going tonight where it can run quizzes like the CLI can. I am going to start a tutorial and see where it goes from there. I'd rather spend the little time I have working on this learning something new instead of perfecting the command line interface, so I am going to give it my best shot. I have about 5 hours until midnight to get something up and running, wish me luck.

Alright, I made a base project with ASP.NET with a React frontend and spent about the last 2 hours looking over it and looking things up and understanding how it all works, and now I think I could bring the files over from the other project into this one, and make a working API for the Quiz program. I don't know if I will be able to get a pretty looking frontend, but I could definitely get an API working that could do all the things. I could start trying to get a frontEnd working, though it would probably be very basic. I would be able to say that I had a fully functioning API, though. My shoulder does hurt, so that might complicate things, but I will do my best!

I'm thinking, now that I am working with all of this stuff with the frontend (which is going great, I have an API working!!!), I'm glad I didn't try to do like the saving to file and all that in the QuizManager, because this is all really stuff that should be in a database anyway. Like, there should be Quiz entried in a database, and I could use database stuff to get all the categories, and get all the quizzes in a given category, and remove quizzes and add quizzes and stuff, it should all be in a database. There's probably ways to structure a database to make all that fast and easy. 
I don't have nearly any time to go and make a database to interface with all that, but that's essentially what QuizManager is playing the role of, a database. If I had more time, I might think about going back and retuning QuizManager to really use a SQL database or mongoDB or something like that to hold all of the quizzes. I could learn how to do that, that would be fun. But alas, there is no time right now.
I'm basically, right now, rediscovering the structure of how a website should work. With a backend, a database, an API, a client frontend. It makes so much sense now that I'm actually making something from the ground up and figuring it out. I've never done anything like this before, so I guess I didn't really know what all the aspects of it needed to be, but now it makes so much sense why you have all of these things.

I was hoping to at least get a fully functioning API that can be interacted with with HTTP calls, but for some reason, there is a bug where when passing a Quiz into the AddQuiz method, the deserializer just ignores the questions array, so all the questions just don't get passed into the method, even though they are there in the struct being passed in. Even in swagger, the schema that it shows for a sample input doesn't have the questions array. I have been trying to figure this out for maybe 30 minutes, I have no idea what on earth could be making it think that the list that is so clearly a part of the class is just not there, so I'm just gonna have to leave it in. I hate that I do, but I have to, I have no idea what is happening there. It's not my fault, the deserializer just doesn't think that the list of questions exists, I guess.
I figured it out! It's because the Questions list was actually a private set, and it couldn't be passed into a constructor, so the deserializer had no way to set the questions list. I fixed that by making another public constructor for a quiz that let you set a list of questions, which should be mostly fine for security, and annotating that constructor with [JsonConstructor], so the deserializer could use that constructor. I had some hiccups before I realized that annotation was a thing, but I learned some things on the way to getting it stable again, so it was worth it.
At this point, I have now a working web API, if there are a lot of things I could change. Currently, the client just runs a few tests, running one request for each of the major functions, then grabbing a random quiz and showing it on the website. It just uses the style from the example program, I don't have time to play with that today. It looks pretty good though, even though the choices aren't randomized. You can't do anything, you just look at them. But, it's a proof of concept if anything. With a few more days, I could get something good going that actually had good functionality. With a few more days I could get it to connect to a database, so it would be like fully off the grid and working. But for now, this will do.
I'm also still not entirely sure how I should handle errors. Should I handle them myself then send a relevant error code? But how would I do that from inside the Controller method? I'm not too sure, I could figure that out but right now it's a little late for that.

Alright, I'm calling it. I'm gonna do the final push to GitHub and write a README, then send it in.
I've learned a ton! Like a literal ton. This was worth it even if I don't get the internship. I learned C#, I learned some React, how and why websites and databases and APIs and frontends and backends work the way they do, and a lot about HTTP and the web. There is a lot I could still change, and a lot of places this could still go, but I'm happy the way it is (not the frontend, but the backend works how it should!)

Final lament:
- I do wish I had time to make the frontend work. I could've learned a lot of React and making things actually functional would've been fun
- I wish I had time to set it up so that the quizzes aren't just stored in RAM and instead they are in a database. That would've simplified the QuizManager a lot, even if I then would've had to learn (or relearn in the case of SQL) how databases work and how to interface with them.

Other than that, thank you guys for this opportunity! This was genuinely fun, and I learned a lot. Be seeing you!